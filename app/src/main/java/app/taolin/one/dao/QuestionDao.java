package app.taolin.one.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<Question, String> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Questiontitle = new Property(1, String.class, "questiontitle", false, "QUESTIONTITLE");
        public final static Property Questioncontent = new Property(2, String.class, "questioncontent", false, "QUESTIONCONTENT");
        public final static Property Answertitle = new Property(3, String.class, "answertitle", false, "ANSWERTITLE");
        public final static Property Answercontent = new Property(4, String.class, "answercontent", false, "ANSWERCONTENT");
        public final static Property Makettime = new Property(5, String.class, "makettime", false, "MAKETTIME");
        public final static Property Editor = new Property(6, String.class, "editor", false, "EDITOR");
        public final static Property Updatedate = new Property(7, String.class, "updatedate", false, "UPDATEDATE");
        public final static Property Weburl = new Property(8, String.class, "weburl", false, "WEBURL");
        public final static Property Readnum = new Property(9, Integer.class, "readnum", false, "READNUM");
        public final static Property Guideword = new Property(10, String.class, "guideword", false, "GUIDEWORD");
        public final static Property Praisenum = new Property(11, Integer.class, "praisenum", false, "PRAISENUM");
        public final static Property Sharenum = new Property(12, Integer.class, "sharenum", false, "SHARENUM");
        public final static Property Commentnum = new Property(13, Integer.class, "commentnum", false, "COMMENTNUM");
        public final static Property Isloaded = new Property(14, Boolean.class, "isloaded", false, "ISLOADED");
    };


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"QUESTIONTITLE\" TEXT NOT NULL ," + // 1: questiontitle
                "\"QUESTIONCONTENT\" TEXT," + // 2: questioncontent
                "\"ANSWERTITLE\" TEXT NOT NULL ," + // 3: answertitle
                "\"ANSWERCONTENT\" TEXT NOT NULL ," + // 4: answercontent
                "\"MAKETTIME\" TEXT NOT NULL ," + // 5: makettime
                "\"EDITOR\" TEXT," + // 6: editor
                "\"UPDATEDATE\" TEXT," + // 7: updatedate
                "\"WEBURL\" TEXT," + // 8: weburl
                "\"READNUM\" INTEGER," + // 9: readnum
                "\"GUIDEWORD\" TEXT," + // 10: guideword
                "\"PRAISENUM\" INTEGER," + // 11: praisenum
                "\"SHARENUM\" INTEGER," + // 12: sharenum
                "\"COMMENTNUM\" INTEGER," + // 13: commentnum
                "\"ISLOADED\" INTEGER);"); // 14: isloaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Question entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getQuestiontitle());
 
        String questioncontent = entity.getQuestioncontent();
        if (questioncontent != null) {
            stmt.bindString(3, questioncontent);
        }
        stmt.bindString(4, entity.getAnswertitle());
        stmt.bindString(5, entity.getAnswercontent());
        stmt.bindString(6, entity.getMakettime());
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(7, editor);
        }
 
        String updatedate = entity.getUpdatedate();
        if (updatedate != null) {
            stmt.bindString(8, updatedate);
        }
 
        String weburl = entity.getWeburl();
        if (weburl != null) {
            stmt.bindString(9, weburl);
        }
 
        Integer readnum = entity.getReadnum();
        if (readnum != null) {
            stmt.bindLong(10, readnum);
        }
 
        String guideword = entity.getGuideword();
        if (guideword != null) {
            stmt.bindString(11, guideword);
        }
 
        Integer praisenum = entity.getPraisenum();
        if (praisenum != null) {
            stmt.bindLong(12, praisenum);
        }
 
        Integer sharenum = entity.getSharenum();
        if (sharenum != null) {
            stmt.bindLong(13, sharenum);
        }
 
        Integer commentnum = entity.getCommentnum();
        if (commentnum != null) {
            stmt.bindLong(14, commentnum);
        }
 
        Boolean isloaded = entity.getIsloaded();
        if (isloaded != null) {
            stmt.bindLong(15, isloaded ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getQuestiontitle());
 
        String questioncontent = entity.getQuestioncontent();
        if (questioncontent != null) {
            stmt.bindString(3, questioncontent);
        }
        stmt.bindString(4, entity.getAnswertitle());
        stmt.bindString(5, entity.getAnswercontent());
        stmt.bindString(6, entity.getMakettime());
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(7, editor);
        }
 
        String updatedate = entity.getUpdatedate();
        if (updatedate != null) {
            stmt.bindString(8, updatedate);
        }
 
        String weburl = entity.getWeburl();
        if (weburl != null) {
            stmt.bindString(9, weburl);
        }
 
        Integer readnum = entity.getReadnum();
        if (readnum != null) {
            stmt.bindLong(10, readnum);
        }
 
        String guideword = entity.getGuideword();
        if (guideword != null) {
            stmt.bindString(11, guideword);
        }
 
        Integer praisenum = entity.getPraisenum();
        if (praisenum != null) {
            stmt.bindLong(12, praisenum);
        }
 
        Integer sharenum = entity.getSharenum();
        if (sharenum != null) {
            stmt.bindLong(13, sharenum);
        }
 
        Integer commentnum = entity.getCommentnum();
        if (commentnum != null) {
            stmt.bindLong(14, commentnum);
        }
 
        Boolean isloaded = entity.getIsloaded();
        if (isloaded != null) {
            stmt.bindLong(15, isloaded ? 1L: 0L);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // questiontitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // questioncontent
            cursor.getString(offset + 3), // answertitle
            cursor.getString(offset + 4), // answercontent
            cursor.getString(offset + 5), // makettime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // editor
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updatedate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // weburl
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // readnum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // guideword
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // praisenum
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // sharenum
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // commentnum
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0 // isloaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setQuestiontitle(cursor.getString(offset + 1));
        entity.setQuestioncontent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswertitle(cursor.getString(offset + 3));
        entity.setAnswercontent(cursor.getString(offset + 4));
        entity.setMakettime(cursor.getString(offset + 5));
        entity.setEditor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdatedate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeburl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReadnum(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setGuideword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPraisenum(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSharenum(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setCommentnum(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setIsloaded(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Question entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
