package app.taolin.one.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE".
*/
public class ArticleDao extends AbstractDao<Article, String> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property SubTitle = new Property(2, String.class, "subTitle", false, "SUB_TITLE");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property AuthorDesc = new Property(4, String.class, "authorDesc", false, "AUTHOR_DESC");
        public final static Property Weibo = new Property(5, String.class, "weibo", false, "WEIBO");
        public final static Property AuthorIntro = new Property(6, String.class, "authorIntro", false, "AUTHOR_INTRO");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property WebLink = new Property(8, String.class, "webLink", false, "WEB_LINK");
        public final static Property MakeTime = new Property(9, String.class, "makeTime", false, "MAKE_TIME");
        public final static Property GuideWord = new Property(10, String.class, "guideWord", false, "GUIDE_WORD");
        public final static Property Isloaded = new Property(11, boolean.class, "isloaded", false, "ISLOADED");
    };


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"SUB_TITLE\" TEXT," + // 2: subTitle
                "\"AUTHOR\" TEXT," + // 3: author
                "\"AUTHOR_DESC\" TEXT," + // 4: authorDesc
                "\"WEIBO\" TEXT," + // 5: weibo
                "\"AUTHOR_INTRO\" TEXT," + // 6: authorIntro
                "\"CONTENT\" TEXT," + // 7: content
                "\"WEB_LINK\" TEXT," + // 8: webLink
                "\"MAKE_TIME\" TEXT NOT NULL ," + // 9: makeTime
                "\"GUIDE_WORD\" TEXT NOT NULL ," + // 10: guideWord
                "\"ISLOADED\" INTEGER NOT NULL );"); // 11: isloaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Article entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getTitle());
 
        String subTitle = entity.getSubTitle();
        if (subTitle != null) {
            stmt.bindString(3, subTitle);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String authorDesc = entity.getAuthorDesc();
        if (authorDesc != null) {
            stmt.bindString(5, authorDesc);
        }
 
        String weibo = entity.getWeibo();
        if (weibo != null) {
            stmt.bindString(6, weibo);
        }
 
        String authorIntro = entity.getAuthorIntro();
        if (authorIntro != null) {
            stmt.bindString(7, authorIntro);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String webLink = entity.getWebLink();
        if (webLink != null) {
            stmt.bindString(9, webLink);
        }
        stmt.bindString(10, entity.getMakeTime());
        stmt.bindString(11, entity.getGuideWord());
        stmt.bindLong(12, entity.getIsloaded() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getTitle());
 
        String subTitle = entity.getSubTitle();
        if (subTitle != null) {
            stmt.bindString(3, subTitle);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String authorDesc = entity.getAuthorDesc();
        if (authorDesc != null) {
            stmt.bindString(5, authorDesc);
        }
 
        String weibo = entity.getWeibo();
        if (weibo != null) {
            stmt.bindString(6, weibo);
        }
 
        String authorIntro = entity.getAuthorIntro();
        if (authorIntro != null) {
            stmt.bindString(7, authorIntro);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String webLink = entity.getWebLink();
        if (webLink != null) {
            stmt.bindString(9, webLink);
        }
        stmt.bindString(10, entity.getMakeTime());
        stmt.bindString(11, entity.getGuideWord());
        stmt.bindLong(12, entity.getIsloaded() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // authorDesc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // weibo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // authorIntro
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // webLink
            cursor.getString(offset + 9), // makeTime
            cursor.getString(offset + 10), // guideWord
            cursor.getShort(offset + 11) != 0 // isloaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setSubTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthorDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeibo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAuthorIntro(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWebLink(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMakeTime(cursor.getString(offset + 9));
        entity.setGuideWord(cursor.getString(offset + 10));
        entity.setIsloaded(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Article entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
